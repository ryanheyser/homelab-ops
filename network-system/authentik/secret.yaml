apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-credentials
  namespace: network-system
spec:
  refreshInterval: "1m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault
  target:
    name: authentik-credentials
    creationPolicy: Owner
    # template:
    #   engineVersion: v2
    #   data:
    #     adminPassword: "{{ .adminPassword }}"
    #     userPassword: "{{ .userPassword }}"
    #     replicationPassword: "{{ .replicationPassword }}"
  data:
    - secretKey: "adminPassword"
      remoteRef:
        # metadataPolicy: Fetch
        key: "authentik-admin"
        property: "adminPassword"
    - secretKey: "userPassword"
      remoteRef:
        # metadataPolicy: Fetch
        key: "authentik-user"
        property: "userPassword"
    - secretKey: "replicationPassword"
      remoteRef:
        # metadataPolicy: Fetch
        key: "authentik-replication"
        property: "replicationPassword"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-secret-key
  namespace: network-system
spec:
  refreshInterval: "1m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault
  target:
    name: authentik-secret-key
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        AUTHENTIK_SECRET_KEY: "{{ .secretKey }}"
        POSTGRES_PASSWORD: "{{ .userPassword }}"
        AUTHENTIK_BOOTSTRAP_PASSWORD: "{{ .authentikBootstrapPassword }}"
        AUTHENTIK_BOOTSTRAP_EMAIL: "me@heyser.xyz"
  data:
    - secretKey: "secretKey"
      remoteRef:
        # metadataPolicy: Fetch
        key: "authentik-secret-key"
        property: "authentik-secret-key"
    - secretKey: "userPassword"
      remoteRef:
        # metadataPolicy: Fetch
        key: "authentik-user"
        property: "userPassword"
    - secretKey: "authentikBootstrapPassword"
      remoteRef:
        # metadataPolicy: Fetch
        key: "authentik-bootstrap-password"
        property: "bootstrapPassword"
    
