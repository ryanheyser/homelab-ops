apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: mangayomi-server-secret-key
spec:
  refreshInterval: "1m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault
  target:
    name: mangayomi-server-secret-key
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        SECRET_KEY: "{{ .secretKey }}"
  data:
    - secretKey: "secretKey"
      remoteRef:
        # metadataPolicy: Fetch
        key: "mangayomi-server-secret-key"
        property: "secret-key"
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: mangayomi-server-mongo-config
spec:
  refreshInterval: "1m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault
  target:
    name: mangayomi-server-mongo-config
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        DATABASE_USER: "{{ .mongoConfigDBUser }}"
        DATABASE_PASSWORD: "{{ .mongoConfigDBPassword }}"
        DATABASE_URL: "{{ .mongoConfigDBUrl }}"
        DATABASE_DB: "{{ .mongoConfigDBName }}"
        MONGO_INITDB_ROOT_USERNAME: "{{ .mongoConfigDBUser }}"
        MONGO_INITDB_ROOT_PASSWORD: "{{ .mongoConfigDBPassword }}"
  data:
    - secretKey: "mongoConfigDBUser"
      remoteRef:
        # metadataPolicy: Fetch
        key: "mangayomi-server-mongo-config"
        property: "mongo-config-database-user"
    - secretKey: "mongoConfigDBPassword"
      remoteRef:
        # metadataPolicy: Fetch
        key: "mangayomi-server-mongo-config"
        property: "mongo-config-database-password"
    - secretKey: "mongoConfigDBUrl"
      remoteRef:
        # metadataPolicy: Fetch
        key: "mangayomi-server-mongo-config"
        property: "mongo-config-database-url"
    - secretKey: "mongoConfigDBName"
      remoteRef:
        # metadataPolicy: Fetch
        key: "mangayomi-server-mongo-config"
        property: "mongo-config-database-name"
---
